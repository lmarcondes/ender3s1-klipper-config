[include klipper-macros.cfg]

[respond]

# [gcode_macro START_PRINT]
# gcode:
#     SET_PRINT_STATS_INFO TOTAL_LAYER=[total_layer_count]
#     {% set EXTRUDER_STANDBY_TEMPERATURE = 170|float %}
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#     # Use absolute coordinates
#     G90
#     # Home the printer
#     G28
#     # Calibrate bed mesh
#     G29
#     M83 ; extruder relative mode
#     M106 S50 ; Fan on approx. 20% to protect cooling ducts
#     # Start bed heating
#     M140 S{BED_TEMP}
#     M104 S{EXTRUDER_STANDBY_TEMPERATURE} ; set standby extruder temp
#     # Wait for bed to reach temperature
#     M190 S{BED_TEMP}
#     # Move the nozzle near the bed
#     G1 Z5 F3000
#     # Move the nozzle very close to the bed
#     G1 Z0.15 F300
#     # Set and wait for nozzle to reach temperature
#     M104 S{EXTRUDER_TEMPERATURE} ; set first layer extruder temp
#     M109 S{EXTRUDER_TEMP}
#     G1 Z2 F240
#     G1 X2 Y10 F3000
#     G1 Z0.28 F240
#     G92 E0.0
#     G1 Y210 E16.0 F1500.0 ; intro line
#     G1 X2.3 F5000
#     G1 Y10 E20 F1200.0 ; intro line
#     G92 E0.0
#     LED_PRINTING

# [gcode_macro END_PRINT]
# gcode:
#     LED_SUCCESS
#     # Turn off bed, extruder, and fan
#     {% set max_y = printer.toolhead.axis_maximum.y|float %}
#     # Move nozzle away from print while retracting
#     M83 ; Relative E
#     G91 ; Relative XYZ
#     G1 X-2 Y-2 Z+5 E-3 F300
#     G90 ; Absolute XYZ
#     M82 ; Absolute E
#     M104 S0 ; turn off temperature
#     M140 S0 ; turn off heatbed
#     M106 S50 ; Leave fan running to protect cooling ducts.
#     # Raise nozzle by 10mm
#     G1 Z10 F3000
#     M107 ; turn off fan
#     # Present print
#     G1 X0 Y210 F3000 ; present print
#     # Disable steppers
#     M84

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

